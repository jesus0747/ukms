import{c}from"./index-BBIIOPvt.js";class m{constructor(){this.client=null,this.currentUser=null,this.authToken=null,this.auth={signIn:async(r,a)=>{const e=this.getClient(),{data:t,error:i}=await e.from("user_profiles").select("*").eq("net_id",r).maybeSingle();if(i||!t)throw new Error("Invalid credentials");if(!t.active)throw new Error("Account is inactive");const{data:n,error:s}=await e.auth.signInWithPassword({email:t.email,password:a});if(s)throw new Error("Invalid credentials");const o={id:t.id,netId:t.net_id,email:t.email,fullName:t.full_name,role:t.role,active:t.active,temporaryPassword:t.temporary_password,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)};return this.currentUser=o,this.authToken=n.session.access_token,{user:o,token:n.session.access_token}},signOut:async()=>{await this.getClient().auth.signOut(),this.currentUser=null,this.authToken=null},createUser:async(r,a)=>{const e=this.getClient(),{data:t,error:i}=await e.auth.admin.createUser({email:r.email,password:a,email_confirm:!0});if(i)throw new Error(i.message);const{data:n,error:s}=await e.from("user_profiles").insert({id:t.user.id,net_id:r.netId,full_name:r.fullName,email:r.email,role:r.role,temporary_password:r.temporaryPassword,active:r.active}).select().single();if(s)throw new Error(s.message);return{id:n.id,netId:n.net_id,email:n.email,fullName:n.full_name,role:n.role,active:n.active,temporaryPassword:n.temporary_password,createdAt:new Date(n.created_at),updatedAt:new Date(n.updated_at)}},updatePassword:async(r,a)=>{const e=this.getClient(),{error:t}=await e.auth.admin.updateUserById(r,{password:a});if(t)throw new Error(t.message)},getCurrentUser:async()=>this.currentUser},this.users={getAll:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("user_profiles").select("*");if(e)throw new Error(e.message);return a.map(t=>({id:t.id,netId:t.net_id,email:t.email,fullName:t.full_name,role:t.role,active:t.active,temporaryPassword:t.temporary_password,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}))},getById:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("user_profiles").select("*").eq("id",r).maybeSingle();if(t)throw new Error(t.message);return e?{id:e.id,netId:e.net_id,email:e.email,fullName:e.full_name,role:e.role,active:e.active,temporaryPassword:e.temporary_password,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}:null},getByNetId:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("user_profiles").select("*").eq("net_id",r).maybeSingle();if(t)throw new Error(t.message);return e?{id:e.id,netId:e.net_id,email:e.email,fullName:e.full_name,role:e.role,active:e.active,temporaryPassword:e.temporary_password,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}:null},create:async(r,a)=>this.auth.createUser(r,a),update:async(r,a)=>{const e=this.getClient(),t={};a.netId&&(t.net_id=a.netId),a.email&&(t.email=a.email),a.fullName&&(t.full_name=a.fullName),a.role&&(t.role=a.role),a.active!==void 0&&(t.active=a.active),a.temporaryPassword!==void 0&&(t.temporary_password=a.temporaryPassword);const{data:i,error:n}=await e.from("user_profiles").update(t).eq("id",r).select().single();if(n)throw new Error(n.message);return{id:i.id,netId:i.net_id,email:i.email,fullName:i.full_name,role:i.role,active:i.active,temporaryPassword:i.temporary_password,createdAt:new Date(i.created_at),updatedAt:new Date(i.updated_at)}},delete:async r=>{const a=this.getClient(),{error:e}=await a.from("user_profiles").delete().eq("id",r);if(e)throw new Error(e.message)},count:async()=>{const r=this.getClient(),{count:a,error:e}=await r.from("user_profiles").select("id",{count:"exact",head:!0});if(e)throw new Error(e.message);return a||0}},this.campuses={getAll:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("campuses").select("*");if(e)throw new Error(e.message);return a.map(t=>({id:t.id,name:t.name,code:t.code,active:t.active,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}))},getById:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("campuses").select("*").eq("id",r).maybeSingle();if(t)throw new Error(t.message);return e?{id:e.id,name:e.name,code:e.code,active:e.active,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}:null},create:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("campuses").insert({name:r.name,code:r.code,active:r.active}).select().single();if(t)throw new Error(t.message);return{id:e.id,name:e.name,code:e.code,active:e.active,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}},update:async(r,a)=>{const e=this.getClient(),{data:t,error:i}=await e.from("campuses").update(a).eq("id",r).select().single();if(i)throw new Error(i.message);return{id:t.id,name:t.name,code:t.code,active:t.active,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}},delete:async r=>{const a=this.getClient(),{error:e}=await a.from("campuses").delete().eq("id",r);if(e)throw new Error(e.message)}},this.buildings={getAll:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("buildings").select("*");if(e)throw new Error(e.message);return a.map(t=>({id:t.id,campusId:t.campus_id,name:t.name,code:t.code,active:t.active,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}))},getByCampusId:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("buildings").select("*").eq("campus_id",r);if(t)throw new Error(t.message);return e.map(i=>({id:i.id,campusId:i.campus_id,name:i.name,code:i.code,active:i.active,createdAt:new Date(i.created_at),updatedAt:new Date(i.updated_at)}))},getById:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("buildings").select("*").eq("id",r).maybeSingle();if(t)throw new Error(t.message);return e?{id:e.id,campusId:e.campus_id,name:e.name,code:e.code,active:e.active,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}:null},create:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("buildings").insert({campus_id:r.campusId,name:r.name,code:r.code,active:r.active}).select().single();if(t)throw new Error(t.message);return{id:e.id,campusId:e.campus_id,name:e.name,code:e.code,active:e.active,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}},update:async(r,a)=>{const e=this.getClient(),t={};a.campusId&&(t.campus_id=a.campusId),a.name&&(t.name=a.name),a.code&&(t.code=a.code),a.active!==void 0&&(t.active=a.active);const{data:i,error:n}=await e.from("buildings").update(t).eq("id",r).select().single();if(n)throw new Error(n.message);return{id:i.id,campusId:i.campus_id,name:i.name,code:i.code,active:i.active,createdAt:new Date(i.created_at),updatedAt:new Date(i.updated_at)}},delete:async r=>{const a=this.getClient(),{error:e}=await a.from("buildings").delete().eq("id",r);if(e)throw new Error(e.message)}},this.keySystems={getAll:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("key_systems").select("*");if(e)throw new Error(e.message);return a.map(t=>({id:t.id,name:t.name,description:t.description,active:t.active,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}))},getById:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("key_systems").select("*").eq("id",r).maybeSingle();if(t)throw new Error(t.message);return e?{id:e.id,name:e.name,description:e.description,active:e.active,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}:null},create:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("key_systems").insert({name:r.name,description:r.description,active:r.active}).select().single();if(t)throw new Error(t.message);return{id:e.id,name:e.name,description:e.description,active:e.active,createdAt:new Date(e.created_at),updatedAt:new Date(e.updated_at)}},update:async(r,a)=>{const e=this.getClient(),{data:t,error:i}=await e.from("key_systems").update(a).eq("id",r).select().single();if(i)throw new Error(i.message);return{id:t.id,name:t.name,description:t.description,active:t.active,createdAt:new Date(t.created_at),updatedAt:new Date(t.updated_at)}},delete:async r=>{const a=this.getClient(),{error:e}=await a.from("key_systems").delete().eq("id",r);if(e)throw new Error(e.message)}},this.keys={getAll:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("keys").select("*");if(e)throw new Error(e.message);return a.map(t=>this.mapKeyFromDB(t))},getById:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("keys").select("*").eq("id",r).maybeSingle();if(t)throw new Error(t.message);return e?this.mapKeyFromDB(e):null},getBySystemId:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("keys").select("*").eq("key_system_id",r);if(t)throw new Error(t.message);return e.map(i=>this.mapKeyFromDB(i))},getByBuildingId:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("keys").select("*").eq("building_id",r);if(t)throw new Error(t.message);return e.map(i=>this.mapKeyFromDB(i))},create:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("keys").insert({key_system_id:r.keySystemId,building_id:r.buildingId,key_code:r.keyCode,key_description:r.keyDescription,core_code:r.coreCode,medeco_key_number:r.medecoKeyNumber,medeco_core_number:r.medecoCoreNumber,medeco_level:r.medecoLevel,stamp_data:r.stampData,active:r.active}).select().single();if(t)throw new Error(t.message);return this.mapKeyFromDB(e)},update:async(r,a)=>{const e=this.getClient(),t={};a.keySystemId&&(t.key_system_id=a.keySystemId),a.buildingId&&(t.building_id=a.buildingId),a.keyCode&&(t.key_code=a.keyCode),a.keyDescription&&(t.key_description=a.keyDescription),a.coreCode&&(t.core_code=a.coreCode),a.medecoKeyNumber&&(t.medeco_key_number=a.medecoKeyNumber),a.medecoCoreNumber&&(t.medeco_core_number=a.medecoCoreNumber),a.medecoLevel&&(t.medeco_level=a.medecoLevel),a.stampData&&(t.stamp_data=a.stampData),a.active!==void 0&&(t.active=a.active);const{data:i,error:n}=await e.from("keys").update(t).eq("id",r).select().single();if(n)throw new Error(n.message);return this.mapKeyFromDB(i)},delete:async r=>{const a=this.getClient(),{error:e}=await a.from("keys").delete().eq("id",r);if(e)throw new Error(e.message)},search:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("keys").select("*").or(`key_code.ilike.%${r}%,key_description.ilike.%${r}%`);if(t)throw new Error(t.message);return e.map(i=>this.mapKeyFromDB(i))}},this.keyHistory={getAll:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("key_history").select("*");if(e)throw new Error(e.message);return a.map(t=>this.mapKeyHistoryFromDB(t))},getByKeyId:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("key_history").select("*").eq("key_id",r);if(t)throw new Error(t.message);return e.map(i=>this.mapKeyHistoryFromDB(i))},getByUserId:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("key_history").select("*").eq("user_id",r);if(t)throw new Error(t.message);return e.map(i=>this.mapKeyHistoryFromDB(i))},getActiveCheckouts:async()=>{const r=this.getClient(),{data:a,error:e}=await r.from("key_history").select("*").eq("status","checked_out");if(e)throw new Error(e.message);return a.map(t=>this.mapKeyHistoryFromDB(t))},getById:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("key_history").select("*").eq("id",r).maybeSingle();if(t)throw new Error(t.message);return e?this.mapKeyHistoryFromDB(e):null},create:async r=>{var i,n;const a=this.getClient(),{data:e,error:t}=await a.from("key_history").insert({key_id:r.keyId,user_id:r.userId,assigned_to:r.assignedTo,assigned_to_email:r.assignedToEmail,checkout_date:r.checkoutDate.toISOString(),expected_return_date:(i=r.expectedReturnDate)==null?void 0:i.toISOString(),actual_return_date:(n=r.actualReturnDate)==null?void 0:n.toISOString(),notes:r.notes,status:r.status}).select().single();if(t)throw new Error(t.message);return this.mapKeyHistoryFromDB(e)},update:async(r,a)=>{const e=this.getClient(),t={};a.assignedTo&&(t.assigned_to=a.assignedTo),a.assignedToEmail&&(t.assigned_to_email=a.assignedToEmail),a.checkoutDate&&(t.checkout_date=a.checkoutDate.toISOString()),a.expectedReturnDate&&(t.expected_return_date=a.expectedReturnDate.toISOString()),a.actualReturnDate&&(t.actual_return_date=a.actualReturnDate.toISOString()),a.notes&&(t.notes=a.notes),a.status&&(t.status=a.status);const{data:i,error:n}=await e.from("key_history").update(t).eq("id",r).select().single();if(n)throw new Error(n.message);return this.mapKeyHistoryFromDB(i)}},this.auditLogs={getAll:async(r=100,a=0)=>{const e=this.getClient(),{data:t,error:i}=await e.from("audit_logs").select("*").order("timestamp",{ascending:!1}).range(a,a+r-1);if(i)throw new Error(i.message);return t.map(n=>({id:n.id,userId:n.user_id,action:n.action,entityType:n.entity_type,entityId:n.entity_id,details:n.details,ipAddress:n.ip_address,timestamp:new Date(n.timestamp)}))},getByUserId:async(r,a=100)=>{const e=this.getClient(),{data:t,error:i}=await e.from("audit_logs").select("*").eq("user_id",r).order("timestamp",{ascending:!1}).limit(a);if(i)throw new Error(i.message);return t.map(n=>({id:n.id,userId:n.user_id,action:n.action,entityType:n.entity_type,entityId:n.entity_id,details:n.details,ipAddress:n.ip_address,timestamp:new Date(n.timestamp)}))},create:async r=>{const a=this.getClient(),{data:e,error:t}=await a.from("audit_logs").insert({user_id:r.userId,action:r.action,entity_type:r.entityType,entity_id:r.entityId,details:r.details,ip_address:r.ipAddress}).select().single();if(t)throw new Error(t.message);return{id:e.id,userId:e.user_id,action:e.action,entityType:e.entity_type,entityId:e.entity_id,details:e.details,ipAddress:e.ip_address,timestamp:new Date(e.timestamp)}}},this.backup={export:async()=>{const r=this.getClient(),a=["user_profiles","campuses","buildings","key_systems","keys","key_history","audit_logs"],e={};for(const t of a){const{data:i,error:n}=await r.from(t).select("*");if(n)throw new Error(n.message);e[t]=i}return JSON.stringify(e,null,2)},import:async r=>{throw new Error("Import not implemented for Supabase adapter")}}}async initialize(r){const{url:a,apiKey:e}=r;if(!a||!e)throw new Error("Supabase requires url and apiKey");this.client=c(a,e)}getClient(){if(!this.client)throw new Error("Supabase client not initialized");return this.client}mapKeyFromDB(r){return{id:r.id,keySystemId:r.key_system_id,buildingId:r.building_id,keyCode:r.key_code,keyDescription:r.key_description,coreCode:r.core_code,medecoKeyNumber:r.medeco_key_number,medecoCoreNumber:r.medeco_core_number,medecoLevel:r.medeco_level,stampData:r.stamp_data,active:r.active,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at)}}mapKeyHistoryFromDB(r){return{id:r.id,keyId:r.key_id,userId:r.user_id,assignedTo:r.assigned_to,assignedToEmail:r.assigned_to_email,checkoutDate:new Date(r.checkout_date),expectedReturnDate:r.expected_return_date?new Date(r.expected_return_date):void 0,actualReturnDate:r.actual_return_date?new Date(r.actual_return_date):void 0,notes:r.notes,status:r.status,createdAt:new Date(r.created_at),updatedAt:new Date(r.updated_at)}}}export{m as SupabaseAdapter};
